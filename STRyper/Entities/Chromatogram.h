//
//  Chromatogram.h
//  STRyper
//
//  Created by Jean Peccoud on 21/12/12.
//  Copyright (c) 2012 Jean Peccoud. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.




#import "CodingObject.h"
#import "Trace.h"

@class Trace, Folder, SampleFolder, SizeStandard, Panel, Genotype, Mmarker;


NS_ASSUME_NONNULL_BEGIN

/// An entity that contains data and metadata extracted from an ABIF file.
///
///	A chromatogram, often referred to as a "sample", contains information extracted from an ABIF file generated by a capillary sequencer for fragment analysis.
///	See [the ABIF file format specifications](https://www.wikidata.org/wiki/Q43992376).
///
///	A chromatogram represents data obtained at a panel of molecular markers, generally from a single individual.
/// The fluorescence data generated by the sequencer are stored in the chromatogram's ``traces``.
///
/// The Chromatogram class implements methods related to genotyping and sizing with a size standard.
///
/// **Sample sizing**
///
/// Fluorescence data is recorded at regular time intervals. Each time point is referred to as a *scan*, starting at 0.
/// The time (scan number) at which a DNA fragment has its fluorescence recorded is proportional to the fragment *size* in base pairs.
///
/// Sizing consists in deriving a size from a scan number, to evaluate the size of any DNA fragment.
///
/// This relies on a *molecular ladder*, which contains DNA fragment of known sizes (these sizes are those contained in a ``SizeStandard`` object).
///
/// For this, peaks found in the fluorescence data from the molecular ladder are attributed  to ``SizeStandard/sizes`` of the size standard.
/// This yields a number of scan-size paired observations, which is used to fit a polynomial of the nth degree.
/// The coefficients of this polynomial are used to derive a size in base pairs for any a scan number and for other any trace of the sample.
///
/// **IMPORTANT:** If the ``sizingQuality`` attribute of the chromatogram returns 0 or `nil`, the sizing parameters are arbitrary and must not be used to compute any size in base pairs.
@interface Chromatogram : CodingObject <NSPasteboardWriting>

/// Returns a complete chromatogram object based on the content of a file and places it in a folder.
///
/// This method returns a chromatogram with all its attributes set (from the file data) except ``importDate``.
/// Its ``traces`` are also generated with all their attributes.
/// No other relationship is set for the sample, except ``folder``.
///
/// If it fails, the method returns `nil` and sets the `error` that has occurred.
/// - Parameters:
///   - path: The path of the ABIF file from which the chromatogram will be generated.
///   - folder: The folder that will contain the chromatogram. This is require to determine the managed object context in which to materialize the chromatogram.
///   - error: On output, any error that prevented the decoding of the file as a chromatogram.
+ (nullable instancetype)chromatogramWithABIFFile:(NSString *)path addToFolder:(SampleFolder *)folder error:(NSError **)error;

#pragma mark - application-related attributes


/// The folder containing the sample.
///
/// The reverse relationship is ``SampleFolder/samples``.
@property (nullable, nonatomic) SampleFolder *folder;

/// The date of import of the sample in this application.
@property (nonatomic) NSDate *importDate;

/// The path o the ABIF file from which the receiver was imported.
@property (nonatomic, readonly) NSString *sourceFile;


///Dynamically returns the top ancestor of the folder to which the sample belongs.
- (Folder *)topAncestor;


#pragma mark - sample-related core data attributes encoded in the ABIF file

/// The name of the sample.
@property (nonatomic) NSString *sampleName;

/// The type of the sample.
@property (nonatomic) NSString *sampleType;

///Any comment that the user has added/can add to the sample.
@property (nonatomic, nullable) NSString *comment;

/// The name of the plate containing the sample.
@property (nonatomic, readonly, nullable) NSString *plate;

/// The position of the sample in the plate (e.g. "B5")
@property (nonatomic, readonly, nullable) NSString *well;

/// The owner of the sample.
@property (nonatomic, readonly, nullable) NSString *owner;

/// The name of the results group to which the sample belong.
@property (nonatomic, readonly, nullable) NSString *resultsGroup;

/// Name of the panel of markers, as extracted from the ABIF file.
///
/// NOTE: this is not the same as the ``Folder/name`` of the sample's ``panel``.
@property (nonatomic, readonly, nullable) NSString *panelName;

/***** Electrophoresis-related attributes **/

/// Type of gel used for the electrophoresis (e.g. "POP7").
@property (nonatomic, readonly, nullable) NSString *gelType;

/// Name of the electrophoresis protocol used.
@property (nonatomic, readonly, nullable) NSString *protocol;

/// The name of run (generally, the folder where the ABIF file was saved).
@property (nonatomic, readonly, nullable) NSString *runName;

/// The time of the end of the run that generated the chromatogram.
@property (nonatomic, readonly, nullable) NSDate *runStopTime;

/// The model of the sequencer that generated the chromatogram.
@property (nonatomic, readonly, nullable) NSString *instrument;

/// The capillary in which the sample DNA has migrated (a 16-bit short).
@property (nonatomic, readonly, nullable) NSNumber *lane;


#pragma mark - trace-related attributes and methods

/// The traces containing fluorescence data.
///
/// This relationship is encoded in ``CodingObject/encodeWithCoder:``  and decoded in ``CodingObject/initWithCoder:``.
///
/// The reverse relationship is ``Trace/chromatogram``.
@property (nonatomic, readonly) NSSet<Trace *> *traces;
																
/// Return the trace corresponding to a given channel.
///
/// This method will return nil if none of the chromatogram's ``traces`` has a ``Trace/channel`` that matches the argument, which would be an error.
///
/// Note : a chromatogram must only have one trace per channel.
/// - Parameter channel: The channel of the trace to retrieve.
- (nullable Trace*)traceForChannel:(ChannelNumber)channel;

#define MAX_TRACE_LENGTH  1000			/// the maximum length of a trace the app can display
																
/// The number of fluorescence data points (scans) recorded for the sample.
///
/// This number must be the same as the number of items (16-bit integer) composing the ``Trace/rawData`` of  each of the  ``traces``.
@property (nonatomic, readonly) int32_t nScans;

/// Number of channels, hence of ``traces`` in the chromatogram, as encoded in the ABIF file.
///
/// This number should be between 4 and 5 (``STRyper`` does not import 6-channel samples).
@property (nonatomic, readonly) NSNumber *nChannels;

/// Indices of scans at which the fluorescence saturated the sequencer camera, as an array of 32-bit integers.
@property (nonatomic, readonly, nullable) NSData *offScaleScans;

/// Array of regions, delimited by scans in ascending orders, in which the fluorescence saturated the camera.
///
///	This object contains an array of ``OffscaleRegion`` structs and is derived from ``offScaleScans``.
@property (nonatomic, readonly, nullable) NSData *offscaleRegions;

/// A structure that defines a region of a chromatogram that is off scale (saturated).
typedef struct OffscaleRegion {
									
	/// The (0-based) index of the first scan of the region.
	int32_t startScan;
	
	/// The number of scans composing the regions.
	int32_t regionWidth;
	
	/// The channel that caused the saturation.
	ChannelNumber channel;
} OffscaleRegion;

/// Infers the channels that caused saturation in traces, if any, and sets the ``offscaleRegions``  attributes.
///
/// The chromatogram calls this method on itself when it is inited with ``chromatogramWithABIFFile:addToFolder:error:``.
-(void) inferOffscaleChannel;


/// The name of the dye (molecule) that emitted fluorescence for the first ``Trace/channel``.
///
/// This property points to the ``Trace/dyeName`` attribute of a trace and is not a core data attribute of ``Chromatogram``.
@property (nonatomic, readonly, nullable) NSString *dye1,

/// The name of the dye (molecule) that emitted fluorescence for the second ``Trace/channel``.
///
/// This property points to the ``Trace/dyeName`` attribute of a trace and is not a core data attribute of ``Chromatogram``.
*dye2,

/// The name of the dye (molecule) that emitted fluorescence for the third ``Trace/channel``.
///
/// This property points to the ``Trace/dyeName`` attribute of a trace and is not a core data attribute of ``Chromatogram``.
*dye3,

/// The name of the dye (molecule) that emitted fluorescence for the fourth ``Trace/channel``.
///
/// This property points to the ``Trace/dyeName`` attribute of a trace and is not a core data attribute of ``Chromatogram``.
*dye4,

/// The name of the dye (molecule) that emitted fluorescence for the fifth ``Trace/channel``.
///
/// This property points to the ``Trace/dyeName`` attribute of a trace and is not a core data attribute of ``Chromatogram``.
*dye5;

#pragma mark - sizing-related attributes and methods

/// The trace that contains data from the molecular ladder.
///
/// This method returns `nil` if none of the samples ``traces`` returns `YES` to ``Trace/isLadder``, which would be an error.
@property (nonatomic, readonly, nullable) Trace *ladderTrace;


/// The size standard of the molecular ladder used to size the sample.
///
/// The reverse relationship is ``SizeStandard/samples``.
///
/// IMPORTANT: setting this relationship automatically makes the chromatogram size itself with the new size standard.
@property (nonatomic, nullable) SizeStandard *sizeStandard;

/// The name of  the size standard applied to the sample, as coded in the ABIF file.
///
/// This is not the same as the ``SizeStandard/name`` of the sample's ``sizeStandard``.
@property (nonatomic, readonly) NSString *standardName;


/// The order of the polynomial used to compute the relationship between scan number (x) and size in base pairs (y) for a `Chromatogram`.
typedef enum PolynomialOrder : int16_t {
	/// Signifies that no polynomial is applied.
	NoFittingMethod = 0,
	
	/// Denotes a polynomial of the first order.
	LinearRegression = 1,
	
	/// Denotes a polynomial of the second order.
	SecondOrderPolynomial = 2,
	
	/// Denotes a polynomial of the third order.
	ThirdOrderPolynomial = 3,
} PolynomialOrder;

/// The order of the polynomial equation used to size the sample.
@property (nonatomic) PolynomialOrder polynomialOrder;

/// Coefficients (array of float) of the nth order polynomial used to derive sizes in base pairs (y) from scan numbers (x).
///
/// The number of coefficients in the array corresponds to ``polynomialOrder``.
@property (nonatomic, readonly) NSData *coefs;

/// Coefficients (array of float) of the nth order polynomial used to scan numbers (x) from sizes in base pairs (y).
/// 
/// This attribute helps obtaining the scan number for a given size, which would otherwise require solving a cubic equation if n = 3.
///
/// The number of coefficients in the array corresponds to ``polynomialOrder``.
@property (nonatomic, readonly) NSData *reverseCoefs;


/// The default length of the chromatogram in base pairs when sizing is not available (sizing not applied, or failed).
extern const float DefaultReadLength;

/// A parameter of sizing quality from 0 to 1 (float).
///
/// This attribute evaluates how much the size of ladder peaks (``Trace/fragments`` of the ``ladderTrace``) deviate from the values of ``sizes`` for their scans.
///
/// The default value is nil.
@property (nonatomic, readonly, nullable) NSNumber *sizingQuality;

/// The size at the first recorded scan assuming a linear regression between scan number (x) and size (y) for the ``Trace/fragments`` of the ``ladderTrace``.
///
/// If no sizing is available, this method returns 0 or nil.
/// In this case,  the ``sizes`` and ``coefs`` attributes must not be used to deduce the size of fragments.
@property (nonatomic, readonly)  float intercept;

/// The slope of the linear relationship between scan number (x) and size (y) for the ``Trace/fragments`` of the ``ladderTrace``.
///
/// If no sizing if available, the method returns `DefaultReadLength` divided by ``nScans``.
@property (nonatomic, readonly) float sizingSlope;

/// Computes the relationship between sizes in base pairs and scan numbers fo the sample, using its molecular ladder.
///
/// This methods sets the  ``coefs``, ``reverseCoefs``, ``intercept``, and ``sizingSlope`` attributes of the receiver, using the ``Trace/fragments`` of the ``ladderTrace``.
///
/// This method fits a polynomial order based on the ``polynomialOrder`` attribute.
/// The method also sets the ``sizingQuality`` attribute.
///
///  If the ``ladderTrace`` of the sample has less than 4 ladder ``Trace/fragments``, the method calls ``setLinearCoefsForReadLength:``.
- (void)computeFitting;

/// Sets the ``coefs`` and  the ``reverseCoefs`` attributes using linear regression and assuming that the size at the first scan is 0, and a given read length for the sample.
///
/// This method is used when less than 4 DNA fragments where characterised in the molecular ladder, hence it sets the ``sizingQuality`` to nil.
/// - Parameter readLength: The assumed length of the read: the size in base pairs corresponding to the last scan.
- (void)setLinearCoefsForReadLength:(float)readLength;

/// The sizes in base pairs corresponding to all recorded scans.
///
///	These sizes are computed thanks to the ``coefs`` attribute.
///	This array avoids sending ``sizeForScan:`` each time a size is obtained from a scan number.
///
/// This data object is an array of float whose length corresponds to ``nScans``.
///
/// This is not a core data attribute.
@property (nonatomic, readonly) NSData *sizes;

/// The length of the sample (read) in base pairs.
///
/// This is the maximum value in the array return by ``sizes``.
/// If no sizing is available, the method returns `defaultReadLength`.
///
/// This is not a core data attribute.
@property (nonatomic, readonly) float readLength;

/// The lowest size return by ``sizes``.
///
///	This value can be negative.
///
/// This is not a core data attribute.
@property (nonatomic, readonly) float startSize;

/// The scan corresponding to the lowest size in base pairs among the values of ``sizes``,
///
/// The default value is 0.
@property (nonatomic, readonly) int minScan;

/// The scan corresponding to the largest value returned by ``sizes``
///
/// The default value is the last scan (``nScans`` -1).
@property (nonatomic, readonly) int maxScan;


/// Returns the size in base pairs corresponding to a given scan number.
///
/// This method uses the ``coefs`` attribute. If this attribute is not available, the method returns a size of -1.
/// - Parameter scan: The scan number for which the size should be derived.
- (float)sizeForScan:(int)scan;

/// Returns the scan number that is the closest to given size in base pairs.
///
/// This method uses the ``reverseCoefs`` attribute.
/// - Parameter size: The size for which the scan number should be derived.
- (int)scanForSize:(float)size;


#pragma mark - genotyping-related attributes and methods

/// The panel of markers used for genotyping the sample.
///
/// The reverse relationship is ``Panel/samples``.
@property (nonatomic, nullable) Panel *panel;

/// The genotypes at the markers of the panel that is applied to the sample.
///
/// The reverse relationship is ``Genotype/sample``.
@property (nonatomic, nullable) NSSet<Genotype *> *genotypes;


/// Returns the sample genotype at a given marker.
-(nullable Genotype *)genotypeForMarker:(Mmarker *)marker;

/// Returns the genotypes whose markers have a given ``Mmarker/channel`` among the sample's ``genotypes``.
-(nullable NSSet <Genotype *> *)genotypesForChannel:(NSInteger)channel;


/// Makes the chromatogram (re)generate its  set of ``genotypes`` given its ``panel``.
///
/// If the sample has no panel, its genotypes will be deleted.
/// Note: alleles are not called by this method, hence their ``LadderFragment/scan`` number remains 0.
/// - Parameter alleleName: The ``LadderFragment/name`` to give to the ``Genotype/alleles`` of each generated genotype.
-(void)applyPanelWithAlleleName:(NSString *)alleleName;
																

@end


/// constants used to avoid typos when using key names in code
extern CodingObjectKey ChromatogramSizesKey,
ChromatogramSizeStandardKey,
ChromatogramStandardNameKey,
ChromatogramSizingQualityKey,
ChromatogramPanelKey,
ChromatogramTracesKey,
ChromatogramGenotypesKey,
ChromatogramCoefsKey,
ChromatogramSampleNameKey,
ChromatogramSampleTypeKey,
ChromatogramOwnerKey,
ChromatogramResultsGroupKey,
ChromatogramInstrumentKey,
ChromatogramProtocolKey,
ChromatogramGelTypeKey,
ChromatogramRunNameKey,
ChromatogramRunStopTimeKey,
ChromatogramImportDateKey,
ChromatogramSourceFileKey,
ChromatogramCommentKey,
ChromatogramPlateKey,
ChromatogramWellKey,
ChromatogramLaneKey,
ChromatogramOffscaleRegionsKey;

/// The paste board type for Chromatogram objects.
///
/// We do not copy chromatograms to the pasteboard, only their the absolute string of their object id.
extern NSPasteboardType _Nonnull const ChromatogramPasteboardType;


NS_ASSUME_NONNULL_END
